<?php

	namespace App\Model\Table;

	use Cake\Event\EventInterface;
    use Cake\ORM\Query\SelectQuery;
    use Cake\ORM\Table;
    use Cake\Utility\Text;
    use Cake\Validation\Validator;

    class ArticlesTable extends Table
	{
        public function beforeSave(EventInterface $event, $entity, $options)
        {
            if ($entity->isNew() && !$entity->slug) {
                $sluggedTitle = Text::slug(strtolower($entity->title));
                // trim slug to maximum length defined in schema
                $entity->slug = substr($sluggedTitle, 0, 191);
            }
        }

        public function initialize (array $config): void
        {
            parent::initialize($config); // TODO: Change the autogenerated stub
            $this->addBehavior('Timestamp');
            $this->belongsToMany('Tags');
        }

        public function validationDefault (Validator $validator): Validator
        {
            $validator->notEmptyString('title')
                ->minLength('title', 10)
                ->maxLength('title', 255)
                ->notEmptyString('body')
                ->minLength('body', 10);
            return $validator;
        }

        public function findTagged(SelectQuery $query, array $tags = []) : SelectQuery
        {
            $columns = [
                'Articles.id',
                'Articles.user_id',
                'Articles.title',
                'Articles.body',
                'Articles.published',
                'Articles.created',
                'Articles.slug'
            ];
            $query = $query->select($columns)->distinct($columns);
            // simplifying into one line and fewer redundant calls, but is the same as an if else
            $condition = (empty($tags)) ? ['Tags.title IS' => null] : ['Tags.title IN' => $tags];
            $query->leftJoinWith('Tags')->where($condition);
            return $query->groupBy(['Articles.id']);
        }
    }
